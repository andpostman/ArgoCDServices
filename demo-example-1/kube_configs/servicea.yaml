kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
#    app: app-a
    app.kubernetes.io/name: app-a
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/instance: app-a
  name: a
  namespace: argoapps
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app-a
  template:
    metadata:
      labels:
#        app: app-a
        app.kubernetes.io/name: app-a
        app.kubernetes.io/version: 1.0.0
        app.kubernetes.io/instance: app-a
#      annotations:
#        application.resourceTrackingMethod: label
#        sidecar.istio.io/inject: 'true'
    spec:
      containers:
        - env:
            - name: SPRING_APPLICATION
              valueFrom:
                configMapKeyRef:
                  name: service-a-config
                  key: application.yml
          name: a
          image: 'argo-servicea:1.0.0'
          ports:
            - containerPort: 8081
              protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 50m
              memory: 256Mi
          volumeMounts:
            - mountPath: /deployments/config/
              name: application-config
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
      dnsPolicy: ClusterFirst
      securityContext: { }
      schedulerName: default-scheduler
      volumes:
        - name: application-config
          configMap:
            name: service-a-config
            items:
              - key: application.yml
                path: application.yml
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 120
---
kind: Service
apiVersion: v1
metadata:
  name: a
  namespace: argoapps
  labels:
#    app: app-a
    app.kubernetes.io/name: app-a
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/instance: app-a
spec:
  ports:
    - name: http-8082
      port: 8082
      protocol: TCP
      targetPort: 8082
    - name: http-8083
      port: 8083
      protocol: TCP
      targetPort: 8083
    - name: http-8081
      port: 8081
      protocol: TCP
      targetPort: 8081
    - name: http-8080
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: app-a
  type: ClusterIP
